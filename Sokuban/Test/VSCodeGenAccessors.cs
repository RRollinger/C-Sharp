/*! 
@author Terence Slot. <Tryan18@gmail.com>
		<http://github.com/tryan18/C#>
@date March 19, 2015
@version 1.0
@section LICENSE

The MIT License (MIT)

Copyright (c) 2013 Terence Slot

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Sokoban_SokobanGameAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Sokoban.SokobanGame));
    
    internal Sokoban_SokobanGameAccessor(global::Sokoban.SokobanGame target) : 
            base(target, m_privateType) {
    }
    
    internal global::Grid.IPoint m_player {
        get {
            global::Grid.IPoint ret = ((global::Grid.IPoint)(m_privateObject.GetField("m_player")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_player", value);
        }
    }
    
    internal global::System.Collections.Hashtable m_states {
        get {
            global::System.Collections.Hashtable ret = ((global::System.Collections.Hashtable)(m_privateObject.GetField("m_states")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_states", value);
        }
    }
    
    internal void addState(string state) {
        object[] args = new object[] {
                state};
        m_privateObject.Invoke("addState", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal bool containsState(string state) {
        object[] args = new object[] {
                state};
        bool ret = ((bool)(m_privateObject.Invoke("containsState", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal System.Collections.Generic.List<Sokoban.Utils.SokobanDirection> stringToDirections(string route) {
        object[] args = new object[] {
                route};
        System.Collections.Generic.List<Sokoban.Utils.SokobanDirection> ret = ((System.Collections.Generic.List<Sokoban.Utils.SokobanDirection>)(m_privateObject.Invoke("stringToDirections", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal global::Sokoban.Utils.SokobanDirection charToDirection(char direction) {
        object[] args = new object[] {
                direction};
        global::Sokoban.Utils.SokobanDirection ret = ((global::Sokoban.Utils.SokobanDirection)(m_privateObject.Invoke("charToDirection", new System.Type[] {
                    typeof(char)}, args)));
        return ret;
    }
    
    internal string getState(Grid.IGrid<Sokoban.Utils.SokobanType> boxes, global::Grid.IPoint player) {
        object[] args = new object[] {
                boxes,
                player};
        string ret = ((string)(m_privateObject.Invoke("getState", new System.Type[] {
                    typeof(Grid.IGrid<Sokoban.Utils.SokobanType>),
                    typeof(global::Grid.IPoint)}, args)));
        return ret;
    }
    
    internal void applyState(string state) {
        object[] args = new object[] {
                state};
        m_privateObject.Invoke("applyState", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal bool isStuck(global::Grid.IPoint boxPosition) {
        object[] args = new object[] {
                boxPosition};
        bool ret = ((bool)(m_privateObject.Invoke("isStuck", new System.Type[] {
                    typeof(global::Grid.IPoint)}, args)));
        return ret;
    }
    
    internal bool isWalkable(global::Grid.IPoint position) {
        object[] args = new object[] {
                position};
        bool ret = ((bool)(m_privateObject.Invoke("isWalkable", new System.Type[] {
                    typeof(global::Grid.IPoint)}, args)));
        return ret;
    }
    
    internal static global::Grid.IPoint directionToPoint(global::Sokoban.Utils.SokobanDirection direction) {
        object[] args = new object[] {
                direction};
        global::Grid.IPoint ret = ((global::Grid.IPoint)(m_privateType.InvokeStatic("directionToPoint", new System.Type[] {
                    typeof(global::Sokoban.Utils.SokobanDirection)}, args)));
        return ret;
    }
    
    internal bool movePlayer(global::Sokoban.Utils.SokobanDirection direction, Grid.IGrid<Sokoban.Utils.SokobanType> boxes, out global::Grid.IPoint boxPosition) {
        object[] args = new object[] {
                direction,
                boxes,
                null};
        bool ret = ((bool)(m_privateObject.Invoke("movePlayer", new System.Type[] {
                    typeof(global::Sokoban.Utils.SokobanDirection),
                    typeof(Grid.IGrid<Sokoban.Utils.SokobanType>),
                    typeof(global::Grid.IPoint).MakeByRefType()}, args)));
        boxPosition = ((global::Grid.IPoint)(args[2]));
        return ret;
    }
}
}
